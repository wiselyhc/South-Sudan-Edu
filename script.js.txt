import { OpenAI } from 'openai';  // Import OpenAI SDK

// Initialize OpenAI client with your API key
const openai = new OpenAI({
  apiKey: 'YOUR_OPENAI_API_KEY',  // Replace this with your actual OpenAI API key
});

const chatBox = document.getElementById('chat-box');
const userInput = document.getElementById('user-input');

async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;  // Don't send empty messages

    // Display the user message
    displayMessage(message, 'user');
    userInput.value = '';  // Clear the input field

    // Get the bot's response from OpenAI
    const botResponse = await getBotResponse(message);
    
    // Display the bot's response after a short delay
    setTimeout(() => {
        displayMessage(botResponse, 'bot');
    }, 1000);
}

function displayMessage(message, sender) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('chat-message', sender);
    messageElement.innerText = message;
    chatBox.appendChild(messageElement);

    // Auto-scroll to the latest message
    chatBox.scrollTop = chatBox.scrollHeight;
}

// Function to get the bot's response from OpenAI API
async function getBotResponse(message) {
    try {
        // Make an API call to OpenAI's Chat completion endpoint
        const completion = await openai.chat.completions.create({
            model: 'gpt-4',  // Correct model name (GPT-4)
            messages: [
                { role: 'user', content: message }  // Send user message to OpenAI
            ],
        });

        // Return the bot's response
        return completion.choices[0].message.content;
    } catch (error) {
        console.error('Error fetching OpenAI response:', error);
        return "Sorry, something went wrong. Please try again later.";  // Error fallback message
    }
}
